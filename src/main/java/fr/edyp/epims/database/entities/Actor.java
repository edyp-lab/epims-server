package fr.edyp.epims.database.entities;
// Generated 10 mai 2021 ï¿½ 11:47:01 by Hibernate Tools 5.2.12.Final


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Actor generated by hbm2java
 */
@Entity
@Table(name = "actor", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "contact"))
public class Actor implements java.io.Serializable {

	private String login;
	private Contact contact;
	private String passwd;
	private Set<ProtocolApplication> protocolApplications = new HashSet<ProtocolApplication>(0);
	private Set<VirtualPlate> virtualPlates = new HashSet<VirtualPlate>(0);
	private Set<ActorRole> actorRoles = new HashSet<ActorRole>(0);
	private Set<MassPlanning> massPlannings = new HashSet<MassPlanning>(0);
	private Set<Sample> samples = new HashSet<Sample>(0);
	private Set<Study> studies = new HashSet<Study>(0);
	private Set<RobotPlanning> robotPlannings = new HashSet<RobotPlanning>(0);
	private Set<Transfer> transfers = new HashSet<Transfer>(0);
	private Set<Project> projects = new HashSet<Project>(0);
	private Set<Program> programs = new HashSet<Program>(0);
	private Set<Project> projects_1 = new HashSet<Project>(0);
	private Set<Study> studies_1 = new HashSet<Study>(0);

	public Actor() {
	}

	public Actor(String login, Contact contact, String passwd) {
		this.login = login;
		this.contact = contact;
		this.passwd = passwd;
	}

	public Actor(String login, Contact contact, String passwd, Set<ProtocolApplication> protocolApplications,
			Set<VirtualPlate> virtualPlates, Set<ActorRole> actorRoles, Set<MassPlanning> massPlannings,
			Set<Sample> samples, Set<Study> studies, Set<RobotPlanning> robotPlannings, Set<Transfer> transfers,
			Set<Project> projects, Set<Program> programs, Set<Project> projects_1, Set<Study> studies_1) {
		this.login = login;
		this.contact = contact;
		this.passwd = passwd;
		this.protocolApplications = protocolApplications;
		this.virtualPlates = virtualPlates;
		this.actorRoles = actorRoles;
		this.massPlannings = massPlannings;
		this.samples = samples;
		this.studies = studies;
		this.robotPlannings = robotPlannings;
		this.transfers = transfers;
		this.projects = projects;
		this.programs = programs;
		this.projects_1 = projects_1;
		this.studies_1 = studies_1;
	}

	@Id

	@Column(name = "login", unique = true, nullable = false)
	public String getLogin() {
		return this.login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "contact", unique = true, nullable = false)
	public Contact getContact() {
		return this.contact;
	}

	public void setContact(Contact contact) {
		this.contact = contact;
	}

	@Column(name = "passwd", nullable = false, length = 50)
	public String getPasswd() {
		return this.passwd;
	}

	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<ProtocolApplication> getProtocolApplications() {
		return this.protocolApplications;
	}

	public void setProtocolApplications(Set<ProtocolApplication> protocolApplications) {
		this.protocolApplications = protocolApplications;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<VirtualPlate> getVirtualPlates() {
		return this.virtualPlates;
	}

	public void setVirtualPlates(Set<VirtualPlate> virtualPlates) {
		this.virtualPlates = virtualPlates;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<ActorRole> getActorRoles() {
		return this.actorRoles;
	}

	public void setActorRoles(Set<ActorRole> actorRoles) {
		this.actorRoles = actorRoles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<MassPlanning> getMassPlannings() {
		return this.massPlannings;
	}

	public void setMassPlannings(Set<MassPlanning> massPlannings) {
		this.massPlannings = massPlannings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<Sample> getSamples() {
		return this.samples;
	}

	public void setSamples(Set<Sample> samples) {
		this.samples = samples;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<Study> getStudies() {
		return this.studies;
	}

	public void setStudies(Set<Study> studies) {
		this.studies = studies;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<RobotPlanning> getRobotPlannings() {
		return this.robotPlannings;
	}

	public void setRobotPlannings(Set<RobotPlanning> robotPlannings) {
		this.robotPlannings = robotPlannings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<Transfer> getTransfers() {
		return this.transfers;
	}

	public void setTransfers(Set<Transfer> transfers) {
		this.transfers = transfers;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "projs_actors", schema = "public", joinColumns = {
			@JoinColumn(name = "actor_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "proj_id", nullable = false, updatable = false) })
	public Set<Project> getProjects() {
		return this.projects;
	}

	public void setProjects(Set<Project> projects) {
		this.projects = projects;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "progs_actors", schema = "public", joinColumns = {
			@JoinColumn(name = "actor_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "program_id", nullable = false, updatable = false) })
	public Set<Program> getPrograms() {
		return this.programs;
	}

	public void setPrograms(Set<Program> programs) {
		this.programs = programs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "actor")
	public Set<Project> getProjects_1() {
		return this.projects_1;
	}

	public void setProjects_1(Set<Project> projects_1) {
		this.projects_1 = projects_1;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "studies_actors", schema = "public", joinColumns = {
			@JoinColumn(name = "actor_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "study_id", nullable = false, updatable = false) })
	public Set<Study> getStudies_1() {
		return this.studies_1;
	}

	public void setStudies_1(Set<Study> studies_1) {
		this.studies_1 = studies_1;
	}

}
