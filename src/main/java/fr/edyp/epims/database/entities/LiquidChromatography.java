package fr.edyp.epims.database.entities;
// Generated 10 mai 2021 ï¿½ 11:47:01 by Hibernate Tools 5.2.12.Final


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * LiquidChromatography generated by hbm2java
 */
@Entity
@Table(name = "liquid_chromatography", schema = "public")
public class LiquidChromatography implements java.io.Serializable {

	private int id;
	private ChromatographyColumn chromatographyColumn;
	private Separation separation;
	private String stationaryPhase;
	private String temperature;
	private String flowRate;
	private String injectionVolume;

	public LiquidChromatography() {
	}

	public LiquidChromatography(ChromatographyColumn chromatographyColumn, Separation separation) {
		this.chromatographyColumn = chromatographyColumn;
		this.separation = separation;
	}

	public LiquidChromatography(ChromatographyColumn chromatographyColumn, Separation separation,
			String stationaryPhase, String temperature, String flowRate,
			String injectionVolume) {
		this.chromatographyColumn = chromatographyColumn;
		this.separation = separation;
		this.stationaryPhase = stationaryPhase;
		this.temperature = temperature;
		this.flowRate = flowRate;
		this.injectionVolume = injectionVolume;
	}

	@GenericGenerator(name = "org.o7planning.generateentities.LiquidChromatographyIdGenerator", strategy = "foreign", parameters = @Parameter(name = "property", value = "separation"))
	@Id
	@GeneratedValue(generator = "org.o7planning.generateentities.LiquidChromatographyIdGenerator")

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "chromatography_column", nullable = false)
	public ChromatographyColumn getChromatographyColumn() {
		return this.chromatographyColumn;
	}

	public void setChromatographyColumn(ChromatographyColumn chromatographyColumn) {
		this.chromatographyColumn = chromatographyColumn;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public Separation getSeparation() {
		return this.separation;
	}

	public void setSeparation(Separation separation) {
		this.separation = separation;
	}

	@Column(name = "stationary_phase")
	public String getStationaryPhase() {
		return this.stationaryPhase;
	}

	public void setStationaryPhase(String stationaryPhase) {
		this.stationaryPhase = stationaryPhase;
	}

	@Column(name = "temperature")
	public String getTemperature() {
		return this.temperature;
	}

	public void setTemperature(String temperature) {
		this.temperature = temperature;
	}

	@Column(name = "flow_rate")
	public String getFlowRate() {
		return this.flowRate;
	}

	public void setFlowRate(String flowRate) {
		this.flowRate = flowRate;
	}

	@Column(name = "injection_volume")
	public String getInjectionVolume() {
		return this.injectionVolume;
	}

	public void setInjectionVolume(String injectionVolume) {
		this.injectionVolume = injectionVolume;
	}

}
